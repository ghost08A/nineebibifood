import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:promptpay_qrcode_generate/promptpay_qrcode_generate.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class Payment extends StatefulWidget {
  const Payment({super.key});

  @override
  State<Payment> createState() => _PaymentState();
}

class _PaymentState extends State<Payment> {
  late double totalPrice;
  late String shopName;
  late List<Map<String, dynamic>> orderItems;
  late double deliveryPrice;
  late bool ecoOption;
  late String token; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Token

  @override
  void initState() {
    super.initState();
    _loadToken(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Token ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏≥‡∏Ç‡∏≠

    // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `OrderDetail`
    final Map<String, dynamic> args = Get.arguments ?? {};
    shopName = args['shop_name'] ?? "Unknown Shop";
    orderItems = List<Map<String, dynamic>>.from(args['items'] ?? []);
    deliveryPrice = args['delivery_price']?.toDouble() ?? 0.0;
    ecoOption = args['eco_option'] ?? false;
    totalPrice = args['total_price']?.toDouble() ?? 0.0;
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î Token ‡∏à‡∏≤‡∏Å SharedPreferences
  Future<void> _loadToken() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    setState(() {
      token = prefs.getString('token') ?? "";
    });
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà API `/api/history`
  Future<void> _saveOrder() async {
    final url = Uri.parse("http://192.168.2.163:3000/api/history");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Token ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (token.isEmpty) {
      Get.snackbar("Error", "Unauthorized: Please login again",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red,
          colorText: Colors.white);
      return;
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    final Map<String, dynamic> orderData = {
      "shop_name": shopName, // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô
      "detail": orderItems.map((item) {
        return {
          // utf8.decode(items[index]['name'].toString().codeUnits),
          "name":
              utf8.decode(item['name'].toString().codeUnits), // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          "price": item['price'], // ‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤
          "quantity": item['quantity'], // ‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        };
      }).toList(),
      "option": deliveryPrice, // ‚úÖ ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
      "eco_option": ecoOption, // ‚úÖ true = ‡∏£‡∏±‡∏ö‡∏ä‡πâ‡∏≠‡∏ô‡∏™‡πâ‡∏≠‡∏°, false = ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö
    };

    try {
      final response = await http.post(
        url,
        headers: {
          "Authorization": "Bearer $token", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Header Authorization
          "Content-Type": "application/json",
        },
        body: jsonEncode(orderData),
      );

      print("üìå API Response: ${response.body}");

      if (response.statusCode == 201) {
        Get.snackbar("‚úÖ Success", "Order saved successfully",
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.green,
            colorText: Colors.white);

        // ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        Get.offAllNamed('/homenine');
      } else {
        Get.snackbar("‚ùå Error", "Failed to save order",
            snackPosition: SnackPosition.BOTTOM,
            backgroundColor: Colors.red,
            colorText: Colors.white);
      }
    } catch (error) {
      print("‚ùå Error saving order: $error");
      Get.snackbar("‚ùå Error", "Failed to connect to server",
          snackPosition: SnackPosition.BOTTOM,
          backgroundColor: Colors.red,
          colorText: Colors.white);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Payment - $shopName"), // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÉ‡∏ô AppBar
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const SizedBox(height: 20),

            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á QR Code PromptPay ‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞
            QRCodeGenerate(
              promptPayId: "0655389857",
              amount: totalPrice,
              width: 300,
              height: 300,
            ),

            const SizedBox(height: 20),

            // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞
            Text(
              "Total Price: ${totalPrice.toStringAsFixed(2)} ‡∏ø",
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),

            const SizedBox(height: 30),

            // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á API
            ElevatedButton(
              onPressed: _saveOrder,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
                elevation: 6,
                shadowColor: Colors.greenAccent,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                minimumSize: const Size(double.infinity, 50),
              ),
              child: const Text(
                '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),

            const SizedBox(height: 10),

            // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
            ElevatedButton(
              onPressed: () {
                Get.offAllNamed('/homenine');
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                elevation: 6,
                shadowColor: Colors.blueAccent,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                minimumSize: const Size(double.infinity, 50),
              ),
              child: const Text(
                '‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
